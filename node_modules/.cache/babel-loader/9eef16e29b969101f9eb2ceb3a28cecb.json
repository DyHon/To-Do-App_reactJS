{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\lehoa\\\\work\\\\TO Do LIST\\\\TODO\\\\to-do-list\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\lehoa\\\\work\\\\TO Do LIST\\\\TODO\\\\to-do-list\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\lehoa\\\\work\\\\TO Do LIST\\\\TODO\\\\to-do-list\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\lehoa\\\\work\\\\TO Do LIST\\\\TODO\\\\to-do-list\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\lehoa\\\\work\\\\TO Do LIST\\\\TODO\\\\to-do-list\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\lehoa\\\\work\\\\TO Do LIST\\\\TODO\\\\to-do-list\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport toastr from 'toastr';\nimport 'toastr/build/toastr.min.css';\nimport uuidv1 from 'uuid/v1';\nimport { fromJS } from 'immutable';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport './style.scss';\nimport Column from './components/Column/';\nimport AddNewModal from './components/AddNewModal/';\nimport Task from './components/Task/';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      displayModal: false,\n      editingColumnIndex: '',\n      taskContent: '',\n      editingTaskIndex: null,\n      editedTaskId: null,\n      columns: fromJS([{\n        id: 'td',\n        title: 'TO DO',\n        tasks: []\n      }, {\n        id: 'ip',\n        title: 'IN PROGRESS',\n        tasks: []\n      }, {\n        id: 'de',\n        title: 'DONE',\n        tasks: []\n      }])\n    };\n\n    _this.handleToggleModal = function () {\n      var choosenColumn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      return function () {\n        _this.setState(function (prevState) {\n          return {\n            displayModal: !prevState.displayModal,\n            editingColumnIndex: choosenColumn\n          };\n        });\n      };\n    };\n\n    _this.handleChangeTaskContent = function (e) {\n      return _this.setState({\n        taskContent: e.target.value\n      });\n    };\n\n    _this.handleChangeeditingColumnIndex = function (editingColumnIndex) {\n      return function () {\n        return _this.setState({\n          editingColumnIndex: editingColumnIndex\n        });\n      };\n    };\n\n    _this.handleAddNewTask = function () {\n      var taskContent = _this.state.taskContent;\n\n      if (taskContent.trim() === '') {\n        toastr.warning('Please enter your task', 'Notice', {\n          timeOut: 2000\n        });\n      } else {\n        var _this$state = _this.state,\n            editingColumnIndex = _this$state.editingColumnIndex,\n            columns = _this$state.columns;\n        var newTask = fromJS({\n          id: uuidv1(),\n          content: taskContent,\n          time: new Date().toLocaleString()\n        });\n        var columnIndex = columns.findIndex(function (column) {\n          return column.get('id') === editingColumnIndex;\n        });\n        var updatedColumn = columns.updateIn([columnIndex, 'tasks'], function (tasks) {\n          return tasks.push(newTask);\n        });\n\n        _this.setState({\n          displayModal: false,\n          editingColumnIndex: '',\n          taskContent: '',\n          columns: fromJS(updatedColumn)\n        }, function () {\n          localStorage.setItem('columns', JSON.stringify(updatedColumn.toJS()));\n        });\n      }\n    };\n\n    _this.handleDeleteTask = function (columnIndex, taskIndex) {\n      return function () {\n        var result = window.confirm('Are your sure to delete this task?');\n\n        if (result) {\n          var columns = _this.state.columns;\n          var updatedColumn = columns.updateIn([columnIndex, 'tasks'], function (tasks) {\n            return tasks.remove(taskIndex);\n          });\n\n          _this.setState({\n            columns: fromJS(updatedColumn)\n          }, function () {\n            localStorage.setItem('columns', JSON.stringify(updatedColumn.toJS()));\n            toastr.success('Delete task success', 'Notice', {\n              timeOut: 2000\n            });\n          });\n        }\n      };\n    };\n\n    _this.handleChooseEditTask = function (columnIndex, taskIndex, taskId) {\n      return function () {\n        _this.setState({\n          editingColumnIndex: columnIndex,\n          editingTaskIndex: taskIndex,\n          editedTaskId: taskId\n        });\n      };\n    };\n\n    _this.handleChangeSelectedColumn = function (selectedColumn) {\n      return function () {\n        _this.setState({\n          selectedColumn: selectedColumn\n        });\n      };\n    };\n\n    _this.handleEdit = function () {\n      var _this$state2 = _this.state,\n          columns = _this$state2.columns,\n          editingColumnIndex = _this$state2.editingColumnIndex,\n          taskContent = _this$state2.taskContent,\n          editingTaskIndex = _this$state2.editingTaskIndex;\n      var updatedColumn = columns.updateIn([editingColumnIndex, 'tasks'], function (tasks) {\n        return tasks.setIn([editingTaskIndex, 'content'], taskContent);\n      });\n\n      _this.setState({\n        editingColumnIndex: '',\n        taskContent: '',\n        editedTaskId: null,\n        editingTaskIndex: null,\n        columns: fromJS(updatedColumn)\n      }, function () {\n        localStorage.setItem('columns', JSON.stringify(updatedColumn.toJS()));\n      });\n    };\n\n    _this.handleCancelEdit = function () {\n      _this.setState({\n        editingColumnIndex: '',\n        taskContent: '',\n        editedTaskId: null,\n        editingTaskIndex: null\n      });\n    };\n\n    _this.handleSaveDrag = function (result) {\n      var source = result.source,\n          destination = result.destination,\n          reason = result.reason;\n\n      if (reason === 'DROP' && destination) {\n        var columns = _this.state.columns;\n        var sourceColumnIndex = columns.findIndex(function (column) {\n          return column.get('id') === source.droppableId;\n        });\n        var task = columns.getIn([sourceColumnIndex, 'tasks', source.index]);\n        var updatedColumn = columns.updateIn([sourceColumnIndex, 'tasks'], function (tasks) {\n          return tasks.remove(source.index);\n        });\n        var destinationColumnIndex = columns.findIndex(function (column) {\n          return column.get('id') === destination.droppableId;\n        });\n        updatedColumn = updatedColumn.updateIn([destinationColumnIndex, 'tasks'], function (tasks) {\n          return tasks.insert(destination.index, task);\n        });\n\n        _this.setState({\n          columns: fromJS(updatedColumn)\n        }, function () {\n          localStorage.setItem('columns', JSON.stringify(updatedColumn.toJS()));\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var columns = localStorage.getItem('columns');\n\n      if (columns) {\n        this.setState({\n          columns: fromJS(JSON.parse(columns))\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state3 = this.state,\n          columns = _this$state3.columns,\n          displayModal = _this$state3.displayModal,\n          editingColumnIndex = _this$state3.editingColumnIndex,\n          taskContent = _this$state3.taskContent,\n          editedTaskId = _this$state3.editedTaskId;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"App\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        className: \"App__title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 17\n        }\n      }, \"TO DO LIST\"), /*#__PURE__*/React.createElement(DragDropContext, {\n        onDragEnd: this.handleSaveDrag,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"App__content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }\n      }, columns.map(function (column, columnIndex) {\n        return /*#__PURE__*/React.createElement(Column, {\n          key: column.get('id'),\n          column: column,\n          handleAddNewTask: _this2.handleToggleModal,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(Droppable, {\n          droppableId: column.get('id'),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 37\n          }\n        }, function (provided) {\n          return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n            ref: provided.innerRef\n          }, provided.droppableProps, {\n            style: {\n              minHeight: '300px'\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 49\n            }\n          }), column.get('tasks').map(function (task, taskIndex) {\n            return /*#__PURE__*/React.createElement(Task, {\n              key: task.get('id'),\n              index: taskIndex,\n              isEditing: task.get('id') === editedTaskId,\n              handleChangeTaskContent: _this2.handleChangeTaskContent,\n              task: task,\n              handleEdit: _this2.handleEdit,\n              handleCancelEdit: _this2.handleCancelEdit,\n              handleChooseEditTask: _this2.handleChooseEditTask(columnIndex, taskIndex, task.get('id')),\n              handleDeleteTask: _this2.handleDeleteTask(columnIndex, taskIndex),\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 61\n              }\n            });\n          }), provided.placeholder);\n        }));\n      }))), displayModal && /*#__PURE__*/React.createElement(AddNewModal, {\n        editingColumnIndex: editingColumnIndex,\n        taskContent: taskContent,\n        handleChangeTaskContent: this.handleChangeTaskContent,\n        handleChangeeditingColumnIndex: this.handleChangeeditingColumnIndex,\n        handleAddNewTask: this.handleAddNewTask,\n        handleToggleModal: this.handleToggleModal(),\n        selectedColumn: this.state.selectedColumn,\n        handleChangeSelectedColumn: this.handleChangeSelectedColumn,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:/Users/lehoa/work/TO Do LIST/TODO/to-do-list/src/App.js"],"names":["React","Component","toastr","uuidv1","fromJS","DragDropContext","Droppable","Column","AddNewModal","Task","App","state","displayModal","editingColumnIndex","taskContent","editingTaskIndex","editedTaskId","columns","id","title","tasks","handleToggleModal","choosenColumn","setState","prevState","handleChangeTaskContent","e","target","value","handleChangeeditingColumnIndex","handleAddNewTask","trim","warning","timeOut","newTask","content","time","Date","toLocaleString","columnIndex","findIndex","column","get","updatedColumn","updateIn","push","localStorage","setItem","JSON","stringify","toJS","handleDeleteTask","taskIndex","result","window","confirm","remove","success","handleChooseEditTask","taskId","handleChangeSelectedColumn","selectedColumn","handleEdit","setIn","handleCancelEdit","handleSaveDrag","source","destination","reason","sourceColumnIndex","droppableId","task","getIn","index","destinationColumnIndex","insert","getItem","parse","map","provided","innerRef","droppableProps","minHeight","placeholder"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport toastr from 'toastr';\r\nimport 'toastr/build/toastr.min.css';\r\nimport uuidv1 from 'uuid/v1';\r\nimport { fromJS } from 'immutable'\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\n\r\nimport './style.scss';\r\nimport Column from './components/Column/';\r\nimport AddNewModal from './components/AddNewModal/';\r\nimport Task from './components/Task/';\r\n\r\nclass App extends Component {\r\n\r\n    state = {\r\n        displayModal: false,\r\n        editingColumnIndex: '',\r\n        taskContent: '',\r\n        editingTaskIndex: null,\r\n        editedTaskId: null,\r\n        columns: fromJS([\r\n            { id: 'td', title: 'TO DO', tasks: [] },\r\n            { id: 'ip', title: 'IN PROGRESS', tasks: [] },\r\n            { id: 'de', title: 'DONE', tasks: [] }\r\n        ])\r\n    }\r\n\r\n    componentDidMount() {\r\n        const columns = localStorage.getItem('columns');\r\n        if (columns) {\r\n            this.setState({ columns: fromJS(JSON.parse(columns)) });\r\n        }\r\n    }\r\n\r\n    handleToggleModal = (choosenColumn = '') => () => {\r\n        this.setState(prevState => ({\r\n            displayModal: !prevState.displayModal,\r\n            editingColumnIndex: choosenColumn\r\n        }));\r\n    }\r\n\r\n    handleChangeTaskContent = (e) => this.setState({ taskContent: e.target.value })\r\n\r\n    handleChangeeditingColumnIndex = (editingColumnIndex) => () => this.setState({ editingColumnIndex: editingColumnIndex })\r\n\r\n    handleAddNewTask = () => {\r\n        const { taskContent } = this.state\r\n        if (taskContent.trim() === '') {\r\n            toastr.warning('Please enter your task', 'Notice', { timeOut: 2000 });\r\n        } else {\r\n            const { editingColumnIndex, columns } = this.state;\r\n            const newTask = fromJS({\r\n                id: uuidv1(),\r\n                content: taskContent,\r\n                time: new Date().toLocaleString()\r\n            });\r\n            const columnIndex = columns.findIndex(column => column.get('id') === editingColumnIndex);\r\n            const updatedColumn = columns.updateIn([columnIndex, 'tasks'], tasks => tasks.push(newTask));\r\n            this.setState({\r\n                displayModal: false,\r\n                editingColumnIndex: '',\r\n                taskContent: '',\r\n                columns: fromJS(updatedColumn)\r\n            }, () => {\r\n                localStorage.setItem('columns', JSON.stringify(updatedColumn.toJS()));\r\n            });\r\n        }\r\n    }\r\n\r\n    handleDeleteTask = (columnIndex, taskIndex) => () => {\r\n        const result = window.confirm('Are your sure to delete this task?');\r\n        if (result) {\r\n            const { columns } = this.state;\r\n            const updatedColumn = columns.updateIn(\r\n                [columnIndex, 'tasks'],\r\n                tasks => tasks.remove(taskIndex));\r\n            this.setState({ columns: fromJS(updatedColumn) }, () => {\r\n                localStorage.setItem('columns', JSON.stringify(updatedColumn.toJS()));\r\n                toastr.success('Delete task success', 'Notice', { timeOut: 2000 });\r\n            });\r\n        }\r\n    }\r\n\r\n    handleChooseEditTask = (columnIndex, taskIndex, taskId) => () => {\r\n        this.setState({\r\n            editingColumnIndex: columnIndex,\r\n            editingTaskIndex: taskIndex,\r\n            editedTaskId: taskId\r\n        })\r\n    }\r\n\r\n    handleChangeSelectedColumn = (selectedColumn) => () => {\r\n        this.setState({ selectedColumn: selectedColumn })\r\n    }\r\n\r\n    handleEdit = () => {\r\n        const { columns, editingColumnIndex, taskContent, editingTaskIndex } = this.state;\r\n        const updatedColumn = columns.updateIn(\r\n            [editingColumnIndex, 'tasks'],\r\n            tasks => tasks.setIn([editingTaskIndex, 'content'], taskContent)\r\n        );\r\n        this.setState({\r\n            editingColumnIndex: '',\r\n            taskContent: '',\r\n            editedTaskId: null,\r\n            editingTaskIndex: null,\r\n            columns: fromJS(updatedColumn)\r\n        }, () => {\r\n            localStorage.setItem('columns', JSON.stringify(updatedColumn.toJS()));\r\n        });\r\n    }\r\n\r\n    handleCancelEdit = () => {\r\n        this.setState({\r\n            editingColumnIndex: '',\r\n            taskContent: '',\r\n            editedTaskId: null,\r\n            editingTaskIndex: null\r\n        });\r\n    }\r\n\r\n    handleSaveDrag = (result) => {\r\n        const { source, destination, reason } = result;\r\n        if (reason === 'DROP' && destination) {\r\n            const { columns } = this.state;\r\n            const sourceColumnIndex = columns.findIndex(column => column.get('id') === source.droppableId);\r\n            const task = columns.getIn([sourceColumnIndex, 'tasks', source.index]);\r\n            let updatedColumn = columns.updateIn(\r\n                [sourceColumnIndex, 'tasks'],\r\n                tasks => tasks.remove(source.index)\r\n            );\r\n            const destinationColumnIndex = columns.findIndex(column => column.get('id') === destination.droppableId);\r\n            updatedColumn = updatedColumn.updateIn(\r\n                [destinationColumnIndex, 'tasks'],\r\n                tasks => tasks.insert(destination.index, task)\r\n            );\r\n            this.setState({\r\n                columns: fromJS(updatedColumn)\r\n            }, () => {\r\n                localStorage.setItem('columns', JSON.stringify(updatedColumn.toJS()));\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { columns, displayModal, editingColumnIndex, taskContent, editedTaskId } = this.state;\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <h1 className=\"App__title\">TO DO LIST</h1>\r\n                <DragDropContext onDragEnd={this.handleSaveDrag}>\r\n                    <div className=\"App__content\">\r\n                        {\r\n                            columns.map((column, columnIndex) => (\r\n                                <Column key={column.get('id')}\r\n                                    column={column}\r\n                                    handleAddNewTask={this.handleToggleModal}\r\n                                >\r\n                                    <Droppable droppableId={column.get('id')}>\r\n                                        {\r\n                                            provided => (\r\n                                                <div ref={provided.innerRef}\r\n                                                    {...provided.droppableProps}\r\n                                                    style={{ minHeight: '300px' }}\r\n                                                >\r\n                                                    {\r\n                                                        column.get('tasks').map((task, taskIndex) => (\r\n                                                            <Task key={task.get('id')}\r\n                                                                index={taskIndex}\r\n                                                                isEditing={task.get('id') === editedTaskId}\r\n                                                                handleChangeTaskContent={this.handleChangeTaskContent}\r\n                                                                task={task}\r\n                                                                handleEdit={this.handleEdit}\r\n                                                                handleCancelEdit={this.handleCancelEdit}\r\n                                                                handleChooseEditTask={this.handleChooseEditTask(columnIndex, taskIndex, task.get('id'))}\r\n                                                                handleDeleteTask={this.handleDeleteTask(columnIndex, taskIndex)} />\r\n                                                        ))\r\n                                                    }\r\n                                                    {provided.placeholder}\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                    </Droppable>\r\n                                </Column>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </DragDropContext>\r\n                {\r\n                    displayModal &&\r\n                    <AddNewModal editingColumnIndex={editingColumnIndex}\r\n                        taskContent={taskContent}\r\n                        handleChangeTaskContent={this.handleChangeTaskContent}\r\n                        handleChangeeditingColumnIndex={this.handleChangeeditingColumnIndex}\r\n                        handleAddNewTask={this.handleAddNewTask}\r\n                        handleToggleModal={this.handleToggleModal()}\r\n                        selectedColumn={this.state.selectedColumn}\r\n                        handleChangeSelectedColumn={this.handleChangeSelectedColumn} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}